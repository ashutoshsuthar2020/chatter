# Default values for chat-app
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  appName: "Chat Application"
  extraEnvVars: {}
  extraSecrets: {}

# Application configuration
app:
  name: chat-app
  version: "1.0.0"

# Server configuration (Node.js backend)
server:
  enabled: true
  name: server
  replicaCount: 3
  
  image:
    registry: docker.io
    repository: myrepo/chat-server
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations: {}
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Horizontal Pod Autoscaler
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  # Health checks
  healthcheck:
    liveness:
      path: /health
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      path: /health
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
  
  # Environment variables
  env:
    NODE_ENV: "development"  # Changed to development for better CORS handling
    PORT: "8000"
    SYNC_INTERVAL_MINUTES: "5"
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 2

# Client configuration (React frontend)
client:
  enabled: true
  name: client
  replicaCount: 2
  
  image:
    registry: docker.io
    repository: myrepo/chat-client
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
    annotations: {}
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Horizontal Pod Autoscaler
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
  
  # Health checks
  healthcheck:
    liveness:
      path: /health
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      path: /health
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
  
  # Environment variables
  env:
    NODE_ENV: "development"  # Changed to development for better CORS handling
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "{{ include \"chat-app.server.fullname\" . }}"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: chat.example.com
      paths:
        - path: /api
          pathType: Prefix
          backend:
            service:
              name: server
              port: 8000
        - path: /socket.io
          pathType: ImplementationSpecific
          backend:
            service:
              name: server  
              port: 8000
        - path: /health
          pathType: Prefix
          backend:
            service:
              name: server
              port: 8000
        - path: /
          pathType: Prefix
          backend:
            service:
              name: client
              port: 80
  tls:
    - secretName: chat-app-tls
      hosts:
        - chat.example.com

# Redis configuration (if using external Redis)
redis:
  enabled: false  # Set to true if you want to install Redis as part of this chart
  architecture: standalone
  auth:
    enabled: false
    password: "redis-password"
  master:
    service:
      ports:
        redis: 6379
    persistence:
      enabled: true
      size: "8Gi"
  
# External Redis configuration (for existing Redis installation)
externalRedis:
  host: "redis-master"
  port: 6379
  password: "redis-password"
  auth:
    enabled: true
    existingSecret: "redis-secret"
    existingSecretPasswordKey: "redis-password"

# Security configuration
security:
  jwtSecret: ""
  sessionSecret: ""

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  # maxUnavailable: 1

# Network Policy
networkPolicy:
  enabled: true
  ingressNamespace: "ingress-nginx"
  allowExternalHttps: true
  allowExternalHttp: false
  ingress:
    enabled: true
  egress:
    enabled: true

# MongoDB configuration (if using external MongoDB)
mongodb:
  enabled: false  # Set to true if you want to install MongoDB as part of this chart
  architecture: standalone
  auth:
    enabled: true
    rootUser: "root"
    rootPassword: "mongodb-password"
    username: "chatapp"
    password: "chatapp-password"
    database: "chatter"
  persistence:
    enabled: true
    size: "20Gi"
  
# External MongoDB configuration (for existing MongoDB installation)
externalMongodb:
  uri: "mongodb+srv://ashu:Drowssap@123@cluster0.ne01a8v.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
  auth:
    enabled: true
    # Optionally use Kubernetes secrets for username/password if you prefer
    # existingSecret: "mongodb-secret"
    # existingSecretUsernameKey: "mongodb-username"
    # existingSecretPasswordKey: "mongodb-password"

# ServiceAccount configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations
podAnnotations: {}

# Pod security context
podSecurityContext:
  fsGroup: 1001

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}
